//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   class class_env {

      String inherits;
      int offset=4, fun_offset, curr_off;
      HashMap<String, String> vars = new HashMap<>();
      HashMap<String, function_env> funs = new HashMap<>();
      Stack<String> funs_st = new Stack<>();
      HashMap<String, Integer> vars_temp = new HashMap<>();
      HashMap<String, Integer> vars_off = new HashMap<>();
      HashMap<String, Integer> funs_temp = new HashMap<>();
      HashMap<String, Integer> funs_off = new HashMap<>();
      class_env() {
         fun_offset = 0;
         offset = 4;
         inherits = "None";
      }
      class_env(String s) {
         fun_offset = 0;
         offset = 4;
         inherits = s;
      }
   }
   
   class function_env {
   
      String ret_type;
      int arg_no;
      HashMap<String, String> args = new HashMap<>();
      Queue<String> argsq = new LinkedList<>();
      HashMap<String, String> vars = new HashMap<>();
      HashMap<String, Integer> arg_temp = new HashMap<>();
      HashMap<String, Integer> vars_temp = new HashMap<>();
      function_env() {
         arg_no = 1;
      }
   }

   HashMap<String, class_env> map = new HashMap<>();
   boolean declare_type, first_trav = true;
   String curr_class = "-";
   String curr_func = "-";

   int temp_no = 0, label_no = 1, tracker = 0;
   boolean need_type = false;
   boolean declaring = false;
   boolean LHS = false;
   boolean flag = false;
   boolean arr_off = false;

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      first_trav = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      first_trav = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
         declare_type = true;
      n.f0.accept(this, argu);
      String cl_name = (String)n.f1.accept(this, argu);
      function_env main_fun = new function_env();
      class_env main_cl = new class_env();
      map.put(cl_name, main_cl);
      String fun_name = "main";
      main_cl.funs.put(fun_name, main_fun);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String arg_name = (String)n.f11.accept(this, argu);
      main_fun.args.put(arg_name, "String[]");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
      }
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      String cl_name = (String)n.f1.accept(this, argu);
      curr_class = cl_name;
      String fun_name = "main";
      curr_func = fun_name;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = true;
      n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);
      map.put(name, new class_env());
      class_env curr_env = map.get(name);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A)curr_env);
      n.f4.accept(this, (A)curr_env);
      n.f5.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      String class_name = (String)n.f1.accept(this, argu);
      curr_class = class_name;
      //System.out.println("Current class is "+curr_class);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = true;
      n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String par_name = (String)n.f3.accept(this, argu);
      map.put(name, new class_env(par_name));
      class_env curr_env = map.get(name);
      n.f4.accept(this, argu);
      n.f5.accept(this, (A)curr_env);
      n.f6.accept(this, (A)curr_env);
      n.f7.accept(this, argu);
      return _ret;   
      }
      n.f0.accept(this, argu);
      String class_name = (String)n.f1.accept(this, argu);
      curr_class = class_name;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      if(declare_type) {
         class_env temp = (class_env)argu;
         String var_type = (String)n.f0.accept(this, argu);
         String var_name = (String)n.f1.accept(this, argu);
         temp.vars.put(var_name, var_type);
         if(var_type == "int") {
            temp.vars_off.put(var_name, temp.offset);
            //System.out.println(var_name + " has offset "+temp.offset);
            temp.offset+=4;
         }
         else if(var_type == "boolean") {
            temp.vars_off.put(var_name, temp.offset);
            //System.out.println(var_name + " has offset "+temp.offset);
            temp.offset+=1;
         }
         else if(var_type.equals("int[]")) {
            temp.vars_off.put(var_name, temp.offset);
            //System.out.println(var_name + " has offset "+temp.offset);
            temp.offset+=4;
         }
         else {
            temp.vars_off.put(var_name, temp.offset);
            //class_env t1 = map.get(var_name);
            temp.offset+=4;
         }
         n.f2.accept(this, argu);
         return _ret;
      }
      else {
         function_env temp = (function_env)argu;
         String var_type = (String)n.f0.accept(this, argu);
         String var_name = (String)n.f1.accept(this, argu);
         // if(temp.vars.containsKey(var_name) || temp.args.containsKey(var_name)) {
         //    //System.out.println("Variable "+var_name+" already present in environment");
         //    System.out.println("Type error");
         //    System.exit(0);
         // }
         temp.vars.put(var_name, var_type);
         n.f2.accept(this, argu);
         return _ret;
      }
      }
      n.f0.accept(this, argu);
      declaring = true;
      n.f1.accept(this, argu);
      declaring = false;
      n.f2.accept(this, argu);

      return _ret;

   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = false;
      class_env curr_env = (class_env)argu;
      function_env func_env = new function_env();
      n.f0.accept(this, argu);
      String return_type = (String)n.f1.accept(this, argu);
      String fun_name = (String)n.f2.accept(this, argu);
      func_env.ret_type = return_type;
      curr_env.funs.put(fun_name, func_env);
      curr_env.funs_off.put(fun_name, curr_env.fun_offset);
      curr_env.funs_st.push(fun_name);
      //System.out.println(fun_name + " has offset "+curr_env.fun_offset);
      curr_env.fun_offset += 4;
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)func_env);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)func_env);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fun_n = (String)n.f2.accept(this, argu);
      curr_func = fun_n;
      int k = map.get(curr_class).funs.get(curr_func).arg_no;
      System.out.println(curr_class+"_"+curr_func+" ["+k+"]");
      System.out.println("BEGIN");
      temp_no = k;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String ret_expr = (String)n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("NOOP");
      System.out.println("RETURN "+ret_expr);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      function_env curr_env = (function_env)argu;
      String arg_type = (String)n.f0.accept(this, argu);
      String arg_name = (String)n.f1.accept(this, argu);
      // if(curr_env.args.containsKey(arg_name) || curr_env.vars.containsKey(arg_name)) {
      //    //System.out.println("Argument "+arg_name+" already present in environment");
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      curr_env.args.put(arg_name, arg_type);
      curr_env.argsq.add(arg_type);
      curr_env.arg_temp.put(arg_name, curr_env.arg_no);
      //System.out.println("Arg "+arg_name+" has temp "+curr_env.arg_no);
      curr_env.arg_no++;
      return _ret;
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      String a = (String)n.f0.accept(this, argu);
      String b = (String)n.f1.accept(this, argu);
      String c = (String)n.f2.accept(this, argu);
      String ret = a+b+c;
      _ret = (R)ret;
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      //int id_temp;
      //System.out.println("Temp is "+temp_no);
      LHS = true;
      String id = (String)n.f0.accept(this, argu);
      LHS = false;
      //System.out.println("ID is "+id);
      // if(map.get(curr_class).funs.get(curr_func).vars_temp.containsKey(id))   {
      //    id_temp = map.get(curr_class).funs.get(curr_func).vars_temp.get(id);
      // }
      // else {
      //    id_temp = temp_no;
      //    temp_no++;
      //    map.get(curr_class).funs.get(curr_func).vars_temp.put(id, id_temp);
      // }
      n.f1.accept(this, argu);
      String s = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(flag) {
         System.out.println("HSTORE "+id+" "+s);
         flag = false;
         return _ret;
      }
      System.out.println("MOVE "+id+" "+s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      String id_temp = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //arr_off = true;
      String off = (String)n.f2.accept(this, argu);
      //arr_off = false;
      // int off_num = Integer.parseInt(off);
      // off_num = (off_num+1)*4;
      // off = Integer.toString(off_num);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String expr = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("MOVE TEMP "+(temp_no)+" 1");
      System.out.println("MOVE TEMP "+(temp_no+1)+" PLUS "+off+" TEMP "+(temp_no));
      temp_no++;
      System.out.println("MOVE TEMP "+(temp_no++)+" 4");
      System.out.println("MOVE TEMP "+(temp_no)+" TIMES TEMP "+(temp_no-1)+" TEMP "+(temp_no-2));
      temp_no++;

      System.out.println("MOVE TEMP "+(temp_no)+" PLUS "+id_temp+" TEMP "+(temp_no-1));
      System.out.println("HSTORE TEMP "+temp_no+" 0 "+expr);
      temp_no++;

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String)n.f2.accept(this, argu);
      int l1 = label_no++;
      System.out.println("CJUMP "+cond+" L"+l1);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("L"+l1);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String)n.f2.accept(this, argu);
      int l1 = label_no++;
      int l2 = label_no++;
      System.out.println("CJUMP "+cond+" L"+l1);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+(l2));
      n.f5.accept(this, argu);
      System.out.println("L"+l1);
      n.f6.accept(this, argu);
      System.out.println("L"+(l2));
      System.out.println("NOOP");

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      int l1 = label_no++;
      int l2 = label_no++;
      System.out.println("L"+l1);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String)n.f2.accept(this, argu);
      System.out.println("CJUMP "+cond+" L"+l2);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+l1);
      System.out.println("L"+l2);
      System.out.println("NOOP");

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("PRINT "+(String)_ret);
      return _ret;
   }

   /**
    * f0 -> Or()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      int l1 = label_no++;
      int l2 = label_no++;
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("CJUMP "+p1+" L"+l1);
      String p2 = (String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+temp_no+" "+p2);
      System.out.println("JUMP L"+l2);
      System.out.println("L"+l1);
      System.out.println("MOVE TEMP "+temp_no+" "+p1);
      System.out.println("L"+l2);
      System.out.println("NOOP");
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      int l1 = label_no++;
      int l2 = label_no++;
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("CJUMP "+p1+" L"+l1);
      String p2 = (String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+temp_no+" "+p1);
      System.out.println("JUMP L"+l2);
      System.out.println("L"+l1);
      System.out.println("MOVE TEMP "+temp_no+" "+p2);
      System.out.println("L"+l2);
      System.out.println("NOOP");
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals("int")) || !(p2.equals("int"))) {
      //    //System.out.println("Relational op on "+p1+" "+p2);
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" LE "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals(p2))) {
      //    //System.out.println("Comparing different types");
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" NE "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals("int")) || !(p2.equals("int"))) {
      //    //System.out.println("Adding not integers "+p1+" "+p2);
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" PLUS "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals("int")) || !(p2.equals("int"))) {
      //    //System.out.println("Subtracting "+p1+" and "+p2);
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" MINUS "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals("int")) || !(p2.equals("int"))) {
      //    //System.out.println("Multiplying not integers");
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" TIMES "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      // if(!(p1.equals("int")) || !(p2.equals("int"))) {
      //    //System.out.println("Dividing not integers");
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      System.out.println("MOVE TEMP "+temp_no+" DIV "+p1+" "+p2);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {   
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      String arr_name = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //arr_off = true;
      String offset = (String)n.f2.accept(this, argu);
      //arr_off = false;
      // int off_num = Integer.parseInt(offset);
      // off_num = (off_num+1)*4;
      // offset = Integer.toString(off_num);
      n.f3.accept(this, argu);
      System.out.println("MOVE TEMP "+(temp_no)+" 1");
      System.out.println("MOVE TEMP "+(temp_no+1)+" PLUS "+offset+" TEMP "+(temp_no));
      temp_no++;
      System.out.println("MOVE TEMP "+(temp_no++)+" 4");
      System.out.println("MOVE TEMP "+(temp_no)+" TIMES TEMP "+(temp_no-1)+" TEMP "+(temp_no-2));
      temp_no++;

      System.out.println("MOVE TEMP "+temp_no+" PLUS "+arr_name+" TEMP "+(temp_no-1));
      System.out.println("HLOAD TEMP "+(temp_no+1)+" TEMP "+temp_no+" 0");
      temp_no++;
      String ret = "TEMP "+temp_no;
      temp_no++;

      return (R)ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String expr = (String)n.f0.accept(this, argu);
      // if(!(expr.equals("int[]"))) {
      //    //System.out.println(".length is defined only for int[]");
      //    System.out.println("Type error");
      //    System.exit(0);
      // }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
      //System.out.println("Function Call Statement");
      String ret;
      need_type = true;
      //System.out.println("Requiring TYPE");
      String class_name = (String)n.f0.accept(this, argu);  //Does not initialise. Returns class name
      //System.out.println("Class name is "+class_name);
      need_type = false;
      String id_name = (String)n.f0.accept(this, argu);     //Returns the TEMP after it stores in var_temp
      //System.out.println("Class name "+class_name+" and object "+id_name);
      n.f1.accept(this, argu);
      String fun_name = (String)n.f2.accept(this, argu);
      //System.out.println("Function Name is "+fun_name);
      n.f3.accept(this, argu);
      String args = (String)n.f4.accept(this, argu);
      if(args==null) { args = ""; }
      n.f5.accept(this, argu);
      //System.out.println("Parse done");
      if(class_name.equals("this")) {
         int k = map.get(curr_class).funs_off.get(fun_name);
         System.out.println("MOVE TEMP "+temp_no+" TEMP 0");
         int class_temp = temp_no;
         temp_no++;
         System.out.println("HLOAD TEMP "+temp_no+" TEMP "+(temp_no-1)+" 0");
         temp_no++;
         System.out.println("HLOAD TEMP "+temp_no+" TEMP "+(temp_no-1)+" "+k);
         temp_no++;
         System.out.println("MOVE TEMP "+temp_no+" CALL TEMP "+(temp_no-1)+" ( TEMP "+class_temp+" "+args+" )");
         ret = "TEMP "+temp_no;
         temp_no++;
      }
      else {
         if(!map.containsKey(class_name))
         {
            //System.out.println(map);
            //System.out.println("Doesn't contain "+class_name+"h");
            System.exit(0);
         }
         else if(!map.get(class_name).funs_off.containsKey(fun_name))
         {
            //System.out.println(class_name+" doesn't contain "+fun_name);
            System.exit(0);
         }
         int k = map.get(class_name).funs_off.get(fun_name);
         System.out.println("MOVE TEMP "+temp_no+" "+id_name);
         int class_temp = temp_no;
         temp_no++;
         System.out.println("HLOAD TEMP "+temp_no+" TEMP "+(temp_no-1)+" 0");
         temp_no++;
         System.out.println("HLOAD TEMP "+temp_no+" TEMP "+(temp_no-1)+" "+k);
         temp_no++;
         System.out.println("MOVE TEMP "+temp_no+" CALL TEMP "+(temp_no-1)+" ( TEMP "+class_temp+" "+args+" )");
         ret = "TEMP "+temp_no;
         temp_no++;
      }
      return (R)ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      
      String ret = (String)n.f0.accept(this, argu);
      String t = (String)n.f1.accept(this, argu);
      if(t!=null) { ret+= t;}

      return (R)ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);

      return _ret;

   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      int t = tracker++;
      //System.out.println("Going with "+need_type+" "+t);
      _ret = n.f0.accept(this, argu);
      //System.out.println("Coming with "+need_type+" "+t);
      //System.out.println("Returned "+(String)_ret);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      String t = (String)n.f0.accept(this, argu);
      if(need_type) {
         return (R)"int";
      }
      else {
         System.out.println("MOVE TEMP "+(temp_no++)+" "+t);
         String ret = "TEMP "+(temp_no-1);
         return (R)ret;
      }
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
         n.f0.accept(this, argu);
         return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"1";

   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"0";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      //System.out.println("Temp is "+temp_no);
      String id_name = (String)n.f0.accept(this, argu);
      _ret = (R)id_name;
      //System.out.println("id_name is "+id_name);
      if(declaring) { return (R)id_name;}
      //System.out.println("ID is "+id_name+" with curr function "+curr_func+" and curr class "+curr_class);
      if(need_type) {//System.out.println(id_name+" - entered");
         if(map.containsKey(curr_class)) {
            class_env obj = map.get(curr_class);
            if(obj.funs.containsKey(curr_func)) {
               function_env obj1 = obj.funs.get(curr_func);
               if(obj1.vars.containsKey(id_name)) {
                  _ret = (R)obj1.vars.get(id_name);
                  //System.out.println("Id "+id_name+" is of type "+(String)_ret);
                  return _ret;
               }
               if(obj1.args.containsKey(id_name)) {
                  _ret = (R)obj1.args.get(id_name);
                  return _ret;
               }
            }
            if(obj.vars.containsKey(id_name)) {
               _ret = (R)obj.vars.get(id_name);
               //System.out.println("Id "+id_name+" is of type "+(String)_ret);
               return _ret;
            }
            if(!(map.get(curr_class).inherits.equals("None"))) {
               _ret = (R)check_classes(id_name, map.get(curr_class).inherits);
            }
            else {
               System.out.println(curr_func+" not present");
               System.exit(0);
            }
         }
         else {
            System.out.println(curr_class+" not present");
            System.exit(0);
         }
      }
      else if(map.containsKey(curr_class) && map.get(curr_class).funs.containsKey(curr_func) && map.get(curr_class).funs.get(curr_func).arg_temp.containsKey(id_name)) {
         int id_temp = map.get(curr_class).funs.get(curr_func).arg_temp.get(id_name);
         String ret = "TEMP "+id_temp;
         return (R)ret;
      }
      else if(map.containsKey(curr_class) && map.get(curr_class).funs.containsKey(curr_func) && map.get(curr_class).funs.get(curr_func).vars.containsKey(id_name)) {//System.out.println("ID idss "+id_name);
         int id_temp;
         if(map.get(curr_class).funs.get(curr_func).vars_temp.containsKey(id_name))   {
            id_temp = map.get(curr_class).funs.get(curr_func).vars_temp.get(id_name);
         }
         else {
            id_temp = temp_no;
            temp_no++;
            map.get(curr_class).funs.get(curr_func).vars_temp.put(id_name, id_temp);
         }
         String ret = "TEMP "+id_temp;
         //System.out.println(id_name+" returns "+ret);
         return (R)ret;
      }
      else if(map.containsKey(curr_class) && map.get(curr_class).vars.containsKey(id_name)) {//System.out.println("IasdD is "+id_name);
         int id_temp;
         if(map.get(curr_class).vars_temp.containsKey(id_name))   {
            id_temp = map.get(curr_class).vars_temp.get(id_name);
         }
         else {
            id_temp = temp_no;
            int off = map.get(curr_class).vars_off.get(id_name);
            if(LHS) {
               flag = true;
               String ret = "TEMP 0 "+off;
               return (R)ret;
            }
            System.out.println("HLOAD TEMP "+id_temp+" TEMP 0 "+off);
            temp_no++;
            map.get(curr_class).vars_temp.put(id_name, id_temp);
         }
         String ret = "TEMP "+id_temp;
         return (R)ret;
      }
      else {
        // System.out.println("ID is d"+id_name);
         _ret = (R)id_name;
      }
      //System.out.println("Returning "+(String)_ret+" with class "+curr_class+" with function "+curr_func);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      if(need_type) {
         return (R)curr_class;
      }
      n.f0.accept(this, argu);
      //System.out.println("MOVE TEMP "+(temp_no++)+" TEMP 0");
      String ret = "TEMP 0";
      return (R)ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {    //RETURNS TEMP STRING AFTER ALLOCATION
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String t = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("MOVE TEMP "+(temp_no)+" 1");
      System.out.println("MOVE TEMP "+(temp_no+1)+" PLUS "+t+" TEMP "+(temp_no));
      temp_no++;
      System.out.println("MOVE TEMP "+(temp_no++)+" 4");
      System.out.println("MOVE TEMP "+(temp_no)+" TIMES TEMP "+(temp_no-1)+" TEMP "+(temp_no-2));
      temp_no++;
      System.out.println("MOVE TEMP "+(temp_no)+" HALLOCATE TEMP "+(temp_no-1));
      System.out.println("HSTORE TEMP "+(temp_no)+" 0 "+t+ "   //storing size");
      temp_no++;
      String ret = "TEMP "+(temp_no-1);

      return (R)ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {         //RETURNS THE TEMP STRING AFTER ALL ALLOCATION
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      boolean k = need_type;
      need_type = false;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      String class_name = (String)_ret;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println("Allocated "+class_name);
      need_type = k;
      if(need_type)
         return (R)class_name;
      else {
         String ret = class_init(class_name);
         return (R)ret;
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p = (String)n.f1.accept(this, argu);
      System.out.println("MOVE TEMP "+temp_no+" 1");
      temp_no++;
      System.out.println("MOVE TEMP "+temp_no+" MINUS TEMP "+(temp_no-1)+" "+p);
      String ret = "TEMP "+temp_no;
      temp_no++;
      return (R)ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      String t = (String)n.f1.accept(this, argu);
      System.out.println("MOVE TEMP "+temp_no+" "+t);
      String ret = "TEMP "+temp_no;
      temp_no++;
      n.f2.accept(this, argu);
      return (R)ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
   public String check_classes(String id_name, String class_name) {
      String ret;
      if(map.containsKey(class_name)) {
         //System.out.println(map.get(class_name).vars);
         class_env obj = map.get(class_name);
         if(obj.vars.containsKey(id_name)) {
            ret = obj.vars.get(id_name);
            //System.out.println("Id "+id_name+" is of type "+(String)_ret);
            return ret;
         }
         if(obj.inherits.equals("None")) {
            return id_name;
         }
         else if(obj.inherits.equals(class_name)) {
            System.out.println("Type error");
            System.exit(0);
         }
         else {
            //System.out.println("Calling "+obj.inherits+" for "+id_name);
            return check_classes(id_name, obj.inherits);
         }
      }
      else {
         System.out.println("Type error");
         System.exit(0);
      }
      return id_name;
   }
   //public boolean args_checker()

   String class_init(String class_name) {
      //System.out.println("Class initialisation Start");
      if(!map.containsKey(class_name)) {
         System.out.println("Class "+class_name+" not present");
         System.exit(0);
      }
      class_env temp = map.get(class_name);
      temp.curr_off = temp_no++;
      int fun_table = temp_no++;
      System.out.println("MOVE TEMP " + (temp_no++) + " " +temp.fun_offset);
      System.out.println("MOVE TEMP "+ (temp_no) + " HALLOCATE TEMP "+(temp_no-1));
      System.out.println("MOVE TEMP " + fun_table+ " TEMP "+temp_no);
      temp_no++;
      int class_base = temp_no++;
      System.out.println("MOVE TEMP " + (temp_no++) + " " + temp.offset);
      System.out.println("MOVE TEMP "+ (temp_no) + " HALLOCATE TEMP "+(temp_no-1));
      System.out.println("MOVE TEMP " + class_base+ " TEMP "+temp_no);
      temp_no++;
      Stack<String> st = temp.funs_st;
      Stack<String> temp1 = new Stack<>();
      int offs = temp.fun_offset - 4;
      while(!st.empty()) {
         String fun_name = st.peek();
         temp1.push(fun_name);
         System.out.println("MOVE TEMP "+(temp_no)+" "+class_name+"_"+fun_name);
         System.out.println("HSTORE TEMP "+fun_table+" "+offs+" TEMP "+temp_no);
         temp_no++;
         offs = offs - 4;
         st.pop();
      }
      while(!temp1.empty()) { st.push(temp1.peek()); temp1.pop(); }
      System.out.println("HSTORE TEMP "+class_base+" 0 TEMP "+fun_table);
      System.out.println("MOVE TEMP "+temp.curr_off+" TEMP "+class_base);
      String ret = "TEMP "+temp.curr_off;
      //System.out.println("Class initialisation End");
      return ret;
   }
}