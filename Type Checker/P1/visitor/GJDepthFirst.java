//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   class class_env {

      String inherits;
      HashMap<String, String> vars = new HashMap<>();
      HashMap<String, function_env> funs = new HashMap<>();
      class_env() {
         inherits = "None";
      }
      class_env(String s) {
         inherits = s;
      }
   }
   
   class function_env {
   
      String ret_type;
      HashMap<String, String> args = new HashMap<>();
      Queue<String> argsq = new LinkedList<>();
      HashMap<String, String> vars = new HashMap<>();
   
   }

   HashMap<String, class_env> map = new HashMap<>();
   boolean declare_type, first_trav = true;
   boolean args_flag = false;
   String curr_class = "-";
   String curr_func = "-";

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      first_trav = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      first_trav = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(first_trav) {
         declare_type = true;
      n.f0.accept(this, argu);
      String cl_name = (String)n.f1.accept(this, argu);
      function_env main_fun = new function_env();
      class_env main_cl = new class_env();
      map.put(cl_name, main_cl);
      String fun_name = "main";
      main_cl.funs.put(fun_name, main_fun);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String arg_name = (String)n.f11.accept(this, argu);
      main_fun.args.put(arg_name, "String[]");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      String cl_name = (String)n.f1.accept(this, argu);
      curr_class = cl_name;
      String fun_name = "main";
      curr_func = fun_name;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = true;
      n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);
      map.put(name, new class_env());
      class_env curr_env = map.get(name);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A)curr_env);
      n.f4.accept(this, (A)curr_env);
      n.f5.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      String class_name = (String)n.f1.accept(this, argu);
      curr_class = class_name;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = true;
      n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String par_name = (String)n.f3.accept(this, argu);
      map.put(name, new class_env(par_name));
      class_env curr_env = map.get(name);
      n.f4.accept(this, argu);
      n.f5.accept(this, (A)curr_env);
      n.f6.accept(this, (A)curr_env);
      n.f7.accept(this, argu);
      return _ret;   
      }
      n.f0.accept(this, argu);
      String class_name = (String)n.f1.accept(this, argu);
      curr_class = class_name;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      curr_class = "-";
      curr_func = "-";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      if(declare_type) {
         class_env temp = (class_env)argu;
         String var_type = (String)n.f0.accept(this, argu);
         String var_name = (String)n.f1.accept(this, argu);
         if(temp.vars.containsKey(var_name)) {
            //System.out.println("Variable "+var_name+" already present in environment");
            System.out.println("Type error");
            System.exit(0);
         }
         temp.vars.put(var_name, var_type);
         n.f2.accept(this, argu);
         return _ret;
      }
      else {
         function_env temp = (function_env)argu;
         String var_type = (String)n.f0.accept(this, argu);
         String var_name = (String)n.f1.accept(this, argu);
         if(temp.vars.containsKey(var_name) || temp.args.containsKey(var_name)) {
            //System.out.println("Variable "+var_name+" already present in environment");
            System.out.println("Type error");
            System.exit(0);
         }
         temp.vars.put(var_name, var_type);
         n.f2.accept(this, argu);
         return _ret;
      }
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;

   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      declare_type = false;
      class_env curr_env = (class_env)argu;
      function_env func_env = new function_env();
      n.f0.accept(this, argu);
      String return_type = (String)n.f1.accept(this, argu);
      String fun_name = (String)n.f2.accept(this, argu);

      func_env.ret_type = return_type;
      if(curr_env.funs.containsKey(fun_name)) {
         //System.out.println("Function "+fun_name+" already present in class");
         System.out.println("Type error");
         System.exit(0);
      }
      curr_env.funs.put(fun_name, func_env);

      n.f3.accept(this, argu);
      n.f4.accept(this, (A)func_env);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)func_env);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fun_n = (String)n.f2.accept(this, argu);
      curr_func = fun_n;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String rett = (String)n.f10.accept(this, argu);
      //System.out.println("Return type is "+rett);
      if(map.containsKey(curr_class)) {
         function_env obj = map.get(curr_class).funs.get(curr_func);
         if(!(rett.equals(obj.ret_type))) {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      function_env curr_env = (function_env)argu;
      String arg_type = (String)n.f0.accept(this, argu);
      String arg_name = (String)n.f1.accept(this, argu);
      if(curr_env.args.containsKey(arg_name) || curr_env.vars.containsKey(arg_name)) {
         //System.out.println("Argument "+arg_name+" already present in environment");
         System.out.println("Type error");
         System.exit(0);
      }
      curr_env.args.put(arg_name, arg_type);
      curr_env.argsq.add(arg_type);
      //System.out.println("Pushing "+arg_type);
      return _ret;
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      String a = (String)n.f0.accept(this, argu);
      String b = (String)n.f1.accept(this, argu);
      String c = (String)n.f2.accept(this, argu);
      String ret = a+b+c;
      _ret = (R)ret;
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Or()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      return _ret;
      }

      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if((!p1.equals("boolean")) || (!p2.equals("boolean"))) {
         //System.out.println("Relational op on non-integer values");
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("boolean")) || !(p2.equals("boolean"))) {
         //System.out.println("Relational op on non-integer values");
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("int")) || !(p2.equals("int"))) {
         //System.out.println("Relational op on "+p1+" "+p2);
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals(p2))) {
         //System.out.println("Comparing different types");
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("int")) || !(p2.equals("int"))) {
         //System.out.println("Adding not integers "+p1+" "+p2);
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("int")) || !(p2.equals("int"))) {
         //System.out.println("Subtracting "+p1+" and "+p2);
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("int")) || !(p2.equals("int"))) {
         //System.out.println("Multiplying not integers");
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String p1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String)n.f2.accept(this, argu);
      if(!(p1.equals("int")) || !(p2.equals("int"))) {
         //System.out.println("Dividing not integers");
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {   
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      String arr_name = (String)n.f0.accept(this, argu);
      //System.out.println(map.get(curr_class).vars);
      if(!(arr_name.equals("int[]"))) {
         //System.out.println("Lookup not defined for "+arr_name);
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this, argu);
      String offset = (String)n.f2.accept(this, argu);
      if(!(offset.equals("int"))) {
         //System.out.println("Offset must be int");
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this, argu);

      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      String expr = (String)n.f0.accept(this, argu);
      if(!(expr.equals("int[]"))) {
         //System.out.println(".length is defined only for int[]");
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
      String class_name = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fun_name = (String)n.f2.accept(this, argu);
      if(!map.containsKey(class_name)) {
         //System.out.println("Program doesn't contain class "+class_name);
         System.out.println("Type error");
         System.exit(0);
      }
      class_env ce = map.get(class_name);
      if(!ce.funs.containsKey(fun_name)) {
         //System.out.println("Class "+class_name+" doesn't contain function "+fun_name);
         System.out.println("Type error");
         System.exit(0);
      }
      function_env fun_env = ce.funs.get(fun_name);
      String fun_ret_type = fun_env.ret_type;
      n.f3.accept(this, argu);
      args_flag = true;
      n.f4.accept(this, (A)fun_env.argsq);
      n.f5.accept(this, argu);
      return (R)fun_ret_type;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return _ret;

   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }

      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);

      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {
         n.f0.accept(this, argu);
         return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"boolean";

   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      _ret = n.f0.accept(this, argu);
      return _ret;
      }
      String id_name = (String)n.f0.accept(this, argu);
      if(map.containsKey(curr_class)) {
         class_env obj = map.get(curr_class);
         if(obj.funs.containsKey(curr_func)) {
            function_env obj1 = obj.funs.get(curr_func);
            if(obj1.vars.containsKey(id_name)) {
               _ret = (R)obj1.vars.get(id_name);
               //System.out.println("Id "+id_name+" is of type "+(String)_ret);
               return _ret;
            }
            if(obj1.args.containsKey(id_name)) {
               _ret = (R)obj1.args.get(id_name);
               return _ret;
            }
         }
         if(obj.vars.containsKey(id_name)) {
            _ret = (R)obj.vars.get(id_name);
            //System.out.println("Id "+id_name+" is of type "+(String)_ret);
            return _ret;
         }
         if(!(map.get(curr_class).inherits.equals("None"))) {
            _ret = (R)check_classes(id_name, map.get(curr_class).inherits);
         }
         else {
            _ret = (R)id_name;
         }
      }
      else {
         _ret = (R)id_name;
      }
      //System.out.println("Returning "+(String)_ret+" with class "+curr_class+" with function "+curr_func);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      return _ret;
      }

      n.f0.accept(this, argu);
      return (R)curr_class;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      String p = (String)_ret;
      if(!(p.equals("boolean"))) {
         //System.out.println(p+" not Boolean");
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      if(first_trav) {  
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
   public String check_classes(String id_name, String class_name) {
      String ret;
      if(map.containsKey(class_name)) {
         //System.out.println(map.get(class_name).vars);
         class_env obj = map.get(class_name);
         if(obj.vars.containsKey(id_name)) {
            ret = obj.vars.get(id_name);
            //System.out.println("Id "+id_name+" is of type "+(String)_ret);
            return ret;
         }
         if(obj.inherits.equals("None")) {
            return id_name;
         }
         else if(obj.inherits.equals(class_name)) {
            System.out.println("Type error");
            System.exit(0);
         }
         else {
            //System.out.println("Calling "+obj.inherits+" for "+id_name);
            return check_classes(id_name, obj.inherits);
         }
      }
      else {
         System.out.println("Type error");
         System.exit(0);
      }
      return id_name;
   }
   //public boolean args_checker()
}