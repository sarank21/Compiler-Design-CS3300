//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   int move_st;
   Boolean is_move = false;
   Boolean is_simple_exp = false;
   Integer args, st_sp, max_arg;

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(".text\n.globl\t\tmain");
      System.out.println("main:");
      n.f1.accept(this, argu);
      String v1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String v2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String v3 = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      args = Integer.parseInt(v1);
      st_sp = Integer.parseInt(v2);
      max_arg = Integer.parseInt(v3);
      int space=st_sp+2;
      if(args>4) {space-=(args-4);}
      if(max_arg>4) {space+=(max_arg-4);}
      space*=4;
      System.out.println("move $fp, $sp\nsubu $sp, $sp, "+space+"\nsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("lw $ra, -4($fp)\naddu $sp, $sp, "+space+"\nj $ra");
      System.out.println();
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      System.out.println(".text\n.globl _halloc\n_halloc:\nli $v0, 9\nsyscall\nj $ra\n\n.text\n.globl _print\n_print:\nli $v0, 1\nsyscall\nla $a0, newl\nli $v0, 4\nsyscall\nj $ra\n\n.data\n.align   0\nnewl:    .asciiz \"\\n\" \n.data\n.align   0\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\"");
      n.f14.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String fun_name = (String)n.f0.accept(this, argu);
      System.out.println(".text\n.globl\t\t"+fun_name);
      System.out.println(fun_name+":");
      n.f1.accept(this, argu);
      String v1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String v2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String v3 = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      args = Integer.parseInt(v1);
      st_sp = Integer.parseInt(v2);
      max_arg = Integer.parseInt(v3);
      int space=st_sp+2;
      if(args>4) {space-=(args-4);}
      if(max_arg>4) {space+=(max_arg-4);}
      space*=4;
      System.out.println("sw $fp, -8($sp)\nmove $fp, $sp\nsubu $sp, $sp, "+space+"\nsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("lw $ra, -4($fp)\nlw $fp, "+(space-8)+"($sp)\naddu $sp, $sp, "+space+"\nj $ra\n");
      n.f12.accept(this, argu);
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("li $v0, 4\nla $a0, str_er\nsyscall\nli $v0, 10\nsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String lab = (String)n.f2.accept(this, argu);
      System.out.println("beqz "+reg+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = (String)n.f1.accept(this, argu);
      System.out.println("b "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String num = (String)n.f2.accept(this, argu);
      String reg2 = (String)n.f3.accept(this, argu);
      System.out.println("sw "+reg2+" "+num+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String reg2 = (String)n.f2.accept(this, argu);
      String num = (String)n.f3.accept(this, argu);
      System.out.println("lw "+reg1+" "+num+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu); 
      is_move = true;
      is_simple_exp = true;
      n.f2.accept(this, (A)reg);
      is_simple_exp = false;
      is_move = false;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      System.out.println("move $a0 "+reg);
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String loc = (String)n.f2.accept(this, argu);
      System.out.println("lw "+reg+" "+loc);
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String loc = (String)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      System.out.println("sw "+reg+" "+loc);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num = (String)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      int nu = Integer.parseInt(num);
      nu-=1;
      nu = nu*4;
      System.out.println("sw "+reg+" "+nu+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      System.out.println("jalr "+reg);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      is_simple_exp = false;
      String reg1 = (String)argu;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, null);
      System.out.println("move $a0 "+reg);
      System.out.println("jal _halloc");
      System.out.println("move "+reg1+" $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      is_simple_exp = false;
      String op = (String)n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String reg2 = (String)n.f2.accept(this, argu);
      String reg3 = (String)argu;
      //System.out.println(op+" is the operator");
      String oper = ret_op(op);
      System.out.println(oper+" "+reg3+", "+reg1+", "+reg2);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String v = (String)n.f1.accept(this, argu);
      int num = Integer.parseInt(v);
      String ptr = "($sp)";
      if(num<(args-4))  {ptr = "($fp)";}
      else {
         if(args>4) {num-=(args-4);}
         if(max_arg>4) {num+=(max_arg-4);}
      }
      num*=4;
      String ret = num+ptr;
      return (R)ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null; 
      _ret = n.f0.accept(this, argu);
      is_simple_exp = false;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      String ret = "$"+(String)_ret;
      if(is_simple_exp) {
         System.out.println("move "+(String)argu+" "+ret);
      }
      return (R)ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(is_simple_exp) {
         System.out.println("li "+(String)argu+" "+(String)_ret);
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(is_simple_exp) {
         System.out.println("la "+(String)argu+" "+(String)_ret);
      }
      else if(printLabel) {
         System.out.println((String)_ret+":");
      }
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   public String ret_op(String oper) {
      if(oper=="MINUS") {
         return "sub";
      }
      if(oper=="PLUS") {
         return "add";
      }
      if(oper=="TIMES") {
         return "mul";
      }
      if(oper=="DIV") {
         return "div";
      }
      if(oper=="LE") {
         return "sle";
      }
      else {
         return "sne";
      }
   }
}
